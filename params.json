{"name":"Stock Portfolio Management Based On Machine Learning Model","tagline":"","body":"# Introduction\r\n\r\nNumerous studies have been conducted in search of a prediction model for stock price and market trend. It’s been so popular as it works towards maximizing the investor’s return while keeping their risks minimum. Traditional technical analysis and Machine learning algorithms are the major analysis categories among them.\r\nIn this project, predictive power of Support Vector Machine(SVM) regression, a supervised learning algorithm and linear regression, are analyzed for short-term stock market prediction. Best performing model among those is used to build a trading system. A quick walk through of the project can be found at the following link.\r\n[Stock Market Price Prediction using Machine Learning Model](https://youtu.be/qQhH8akOdN8)\r\n# Can we make build a Stock Trading Assistant ?\r\nThe problem at hand can be summarized as follows. We have a portfolio of a 10 stocks from a particular sector. We would like to invest a fixed amount of money in it. We would like to make sell/buy/keep decisions periodically in order to make maximum return from the investment. Whenever we predict 2% hike in price next day, we decide to buy more of those stock today and sell for 2% price dip. Any other prediction falls under the recommendation ‘keep’. Objective is to generate a stock trading recommendation and send it via email to investors daily. \r\nIdeas from machine learning are applied to approach the above problem. The key point towards the solution strategy is that historical values of a given stock, for example, price and/or index carry information which can be utilized to identify a pattern to predict future price. So, in this project, different machine learning models, which represent those pattern, are evaluated and the best one found is used to solve the problem.\r\n# Development Approach\r\n Working towards the solution consists of two major steps. First step is, evaluation and selection of the best model, for this particular problem scenario. Second, build an application with the chosen model. \r\n## Algorithms\r\nSupport Vector Machine, supervised learning algorithm and linear regression have used in this study. Both of them are implemented in R statistical programming language. Package e1071 is used for SVM implementation.\r\n## Data Collection\r\nData for this project is collected from Yahoo Finance. 10 years of data for 10 stocks in oil sector is collected. Following Machine Learning methodology, the total data is divided into 3 parts – 6 years for training the model, 3 years for cross-validation and 1 year for testing. \r\n## Data Preprocessing and Feature Selection\r\nCollected data has Date, Open, High, Low, Close, Volume, Dow Jones Index and Adjusted Close as otherwise called features. Model building is based on the hypothesis that previous week's features contain some information on  the next day’s price. So the task is find appropriate features from the previous five days data through analysis. As a first step, the data is processed to extract last five days variables in one single record. In addition, difference between each consecutive days index and volume is calculated and taken as another feature. Difference between consecutive day’s volume value is converted into logarithmic space to make it comparable with other features. A portion of the sample input is shown below.\r\n![sample input](https://cloud.githubusercontent.com/assets/11024045/11378734/ec16915c-92a9-11e5-8c16-c3c4a5f97898.png)\r\nAdj_Close_1 - Current day's close price  \r\n\r\nLow_1 - Current day's low price  \r\n\r\nHigh_1 - Current day's high price  \r\n\r\nIndex2_1 - Difference between last day and current day's index  \r\n\r\nVolume2_1 - Log of the difference between last day and current day's volume  \r\n\r\nAdj_Close is next day's price, it is kept in the test files in order to analyze the performance of the model, though, it won't be  available in real case.Other features are self-explanatory.Few test files are uploaded in the repository.  \r\n\r\n\r\n## Training and Cross-Validation Error Analysis\r\nIn this analysis, mean absolute error of different models, i.e., intuitively choosing different formulas for the models are plotted and studied, where `mean absolute error = mean(abs(actual price – predicted price)` in the dataset. The same is done with training data as well as cross-validation data. Primarily, experimented wit SVM with radial-bias kernel, linear kernel and linear regression . Summary of the result is in Fig.1\r\n![ErrorAnalysis.png](https://cloud.githubusercontent.com/assets/11024045/11371244/c64f128e-9284-11e5-884d-d4a21f81fe7f.png)\r\n\r\nAlgorithm and formula which gave minimum error in validation dataset is taken as the best found. Minimum training error model is eliminated, as it may be indicate overfitting to the training data. \r\nFrom the plot simple linear regression is found to be slightly better compared to SVM linear regression. R commands and scripts used for the analysis can be found in the repository. \r\n# Accuracy of Models\r\nNext step is finding the accuracy of prediction. Hypothesis behind accuracy definition in this particular application is taken as follows. In order to derive useful insight from price prediction, error percentage between actual and predicted price should be less than 1%. Prediction less than 1% is considered good and otherwise. Then accuracy of a model is calculated as `(good predictions/ total predictions)` Result is summarized in the plot below.Linear regression found to be the best among the three with 54% accuracy, while SVM with linear kernel is around 53% accuracy.\r\n\r\n![accuracy analysis](https://cloud.githubusercontent.com/assets/11024045/11371536/3e407bd8-9286-11e5-9dc6-e589d828c80f.png)\r\n\r\n\t  \r\nSVM algorithm performance varies with the selection of Cost parameter. So, in order to find the best cost parameter, accuracy is analyzed for a range of cost parameters with `tune.svm` command under the library e1071. But, the best ‘cost’ parameter for the chosen formula is .5. But, the new cost parameter did not improve the accuracy significantly.\r\nThus, linear regression proved to perform slightly better compared to SVM linear regression. \r\n# Python R Integration\r\nAfter analyzing and experimenting the performance of different models, linear regression with the best performing formula is chosen to predict the stock price. Model is saved with the R command  \r\n  \r\n    saveRDS(model, 'linear_model.rds')  \r\n\r\nPython program is used to implement recommendation email generation functionality. PipeR module is used to integrate Python with R. Model is saved and imported to Python to make predictions.  \r\n\r\n    r('library(e1071)')  \r\n  \r\n    r('model <- readRDS(\\'modelfile.rds\\')')  \r\n\r\n    r('days5_data = read.csv(\\\"test2.data.csv\\\",header = T)')  \r\n\r\n    r('predict_stockprice = predict(model,newdata = days5_data)')  \r\n\r\nEmail is sent from Python evaluating the expected percentage price increase for each stock in the portfolio.\r\n# Testing \r\n## Input \r\nTwo programs are created, first one is accepting a flat file in csv format with last week's features of the 10 stocks in the portfolio. Second program is reading stock features directly from yahoo finance and Quandl database and creating the csv file at real-time.\r\nPython program process the input data through the saved model and generate an email and send to the investor. A sample message body is shown below.\r\n## Output\r\nScreen shot of sample email message is shown below.\r\n \r\n![Output email content](https://cloud.githubusercontent.com/assets/11024045/11827235/e8befef0-a347-11e5-8d9e-03a117e070e4.png) \r\n\r\nFor real-time testing data is prepared and tested for two weeks. It is found that model built is not strong enough to reflect 2% price change in order to give insightful trading suggestions. So instead of sending buy/sell recommendation, output format is modified to give predicted percentage change in sorted order.\r\n# Summary\r\nTrading strategy developed in this project is based on linear regression. Accuracy (defined in the section ‘Accuracy of  models’) is found to be low, around 54% for short-term price prediction for the developed portfolio management system. \r\nWe may need the system to predict even 2% price change in order to make short term investment profitable. As a reflection of low accuracy, system was not able to give promising results with the set of features taken under consideration. \r\n\r\n# Future Work\r\nIt is worth considering to include lot other variables which control stock market ,into the feature set. Company’s quarterly results or capturing the sentiments from the news articles are some of them. Alternatively, model could be altered to predict price movement trend for long term investment options. Conclusively, this study is a good stepping stone to understand machine learning methodologies as well as various possibilities of applying machine learning techniques in stock market.\r\n\r\n# References\r\n[Novel Algorithmic Trading Network](http://blog.andersen.im/wp- content/uploads/2012/12/ANovelAlgorithmicTradingFramework.pdf)\r\n\r\n[Prediction in Equity Market](http://cs229.stanford.edu/proj2012/LangWang- PatternRecognitionAndPredictionInEquityMarket.pdf)\r\n\r\n[SVM for prediction of stocks](http://www.iima.org/CIIMA/11%20CIIMA%207-4-07%20Han%2063-72.pdf)\r\n\r\n[SVM in R](http://cbio.ensmp.fr/~jvert/svn/tutorials/practical/svmbasic/svmbasic_notes.pdf)\r\n\r\n[Selection of SVM parameters](http://www.ece.umn.edu/users/cherkass/N2002-SI-SVM-13-whole.pdf)\r\n\r\n[Save and load objects in R](http://www.fromthebottomoftheheap.net/2012/04/01/saving-and-loading-r-objects/)\r\n\r\n[Quandl](https://www.quandl.com/)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}